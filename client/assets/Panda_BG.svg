<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="296.70209mm"
   height="213.21689mm"
   viewBox="0 0 296.70209 213.21689"
   version="1.1"
   id="svg1"
   inkscape:export-filename="main.svg"
   inkscape:export-xdpi="96"
   inkscape:export-ydpi="96"
   xml:space="preserve"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg"><sodipodi:namedview
     id="namedview1"
     pagecolor="#505050"
     bordercolor="#eeeeee"
     borderopacity="1"
     inkscape:showpageshadow="0"
     inkscape:pageopacity="0"
     inkscape:pagecheckerboard="0"
     inkscape:deskcolor="#505050"
     inkscape:document-units="mm" /><defs
     id="defs1" /><g
     inkscape:label="图层 1"
     inkscape:groupmode="layer"
     id="layer1"
     transform="translate(-0.46981792,0.16308819)"><text
       xml:space="preserve"
       style="font-size:6.33218px;writing-mode:vertical-lr;direction:ltr;white-space:pre;inline-size:398.397;fill:#00ff00;stroke:#ffff00;stroke-width:0;stroke-dasharray:none;stroke-opacity:1;paint-order:fill markers stroke"
       x="2.6662323"
       y="-8.0282558e-07"
       id="text17"
       transform="matrix(0.17202634,0,0,0.53612518,0.34063361,-0.10838616)"><tspan
         x="2.6662323"
         y="-8.0282558e-07"
         id="tspan1">#include &lt;stdio.h&gt;
</tspan><tspan
         x="10.581458"
         y="-8.0282558e-07"
         id="tspan2">#include &lt;stdlib.h&gt;
</tspan><tspan
         x="18.496683"
         y="-8.0282558e-07"
         id="tspan3">struct Node{
</tspan><tspan
         x="26.411909"
         y="-8.0282558e-07"
         id="tspan4">   int length;
</tspan><tspan
         x="34.327135"
         y="-8.0282558e-07"
         id="tspan5">}
</tspan><tspan
         x="42.242361"
         y="-8.0282558e-07"
         id="tspan6">
</tspan><tspan
         x="50.157587"
         y="-8.0282558e-07"
         id="tspan7">typedef struct stack{
</tspan><tspan
         x="58.072813"
         y="-8.0282558e-07"
         id="tspan8">    int len;
</tspan><tspan
         x="65.988039"
         y="-8.0282558e-07"
         id="tspan9">    struct stack_node *top,*end;
</tspan><tspan
         x="73.903261"
         y="-8.0282558e-07"
         id="tspan10">}stack;
</tspan><tspan
         x="81.818483"
         y="-8.0282558e-07"
         id="tspan11">struct stack_node{
</tspan><tspan
         x="89.733705"
         y="-8.0282558e-07"
         id="tspan12">    string data;
</tspan><tspan
         x="97.648927"
         y="-8.0282558e-07"
         id="tspan13">    void *more_data;
</tspan><tspan
         x="105.56415"
         y="-8.0282558e-07"
         id="tspan14">    int add_len ;
</tspan><tspan
         x="113.47937"
         y="-8.0282558e-07"
         id="tspan15">    struct stack_node *next;
</tspan><tspan
         x="121.39459"
         y="-8.0282558e-07"
         id="tspan16">    struct stack_node *last;
</tspan><tspan
         x="129.30982"
         y="-8.0282558e-07"
         id="tspan18">};
</tspan><tspan
         x="137.22504"
         y="-8.0282558e-07"
         id="tspan20">/*function definition of stack*/
</tspan><tspan
         x="145.14026"
         y="-8.0282558e-07"
         id="tspan21">struct stack *Stack();
</tspan><tspan
         x="153.05548"
         y="-8.0282558e-07"
         id="tspan28">void push_stack(struct stack *stack, string data);
</tspan><tspan
         x="161.05044"
         y="-8.0282558e-07"
         id="tspan237">void add_stack_data(struct stack *stack, void *data); //默认给栈顶添加数据
</tspan><tspan
         x="169.04541"
         y="-8.0282558e-07"
         id="tspan238">void pop_stack(struct stack *stack);
</tspan><tspan
         x="176.96063"
         y="-8.0282558e-07"
         id="tspan239">void print_stack(struct stack *stack);
</tspan><tspan
         x="184.9556"
         y="-8.0282558e-07"
         id="tspan240">struct stack_node *get_stack_top(struct stack *stack);//获得栈顶
</tspan><tspan
         x="193.0303"
         y="-8.0282558e-07"
         id="tspan241">/*The following code is the list definition, 
</tspan><tspan
         x="201.02527"
         y="-8.0282558e-07"
         id="tspan242">the struct and function definition*/
</tspan><tspan
         x="208.94049"
         y="-8.0282558e-07"
         id="tspan243">typedef struct list{
</tspan><tspan
         x="216.85571"
         y="-8.0282558e-07"
         id="tspan244">    int len;
</tspan><tspan
         x="224.77094"
         y="-8.0282558e-07"
         id="tspan245">    struct list_node *head,*tail;
</tspan><tspan
         x="232.68616"
         y="-8.0282558e-07"
         id="tspan246">}list;
</tspan><tspan
         x="240.60138"
         y="-8.0282558e-07"
         id="tspan247">struct list_node{
</tspan><tspan
         x="248.5166"
         y="-8.0282558e-07"
         id="tspan248">    string data;
</tspan><tspan
         x="256.43183"
         y="-8.0282558e-07"
         id="tspan249">    struct list_node *next;
</tspan><tspan
         x="264.34705"
         y="-8.0282558e-07"
         id="tspan250">    struct list_node *last;
</tspan><tspan
         x="272.26227"
         y="-8.0282558e-07"
         id="tspan251">};
</tspan><tspan
         x="280.17749"
         y="-8.0282558e-07"
         id="tspan252">typedef struct iterator_list{
</tspan><tspan
         x="288.09271"
         y="-8.0282558e-07"
         id="tspan253">    list *list;
</tspan><tspan
         x="296.00794"
         y="-8.0282558e-07"
         id="tspan254">    Size_T iter_len ;
</tspan><tspan
         x="303.92316"
         y="-8.0282558e-07"
         id="tspan255">    struct list_node *node ;
</tspan><tspan
         x="311.83838"
         y="-8.0282558e-07"
         id="tspan256">}iterator_list;
</tspan><tspan
         x="319.83334"
         y="-8.0282558e-07"
         id="tspan257">//迭代器的函数
</tspan><tspan
         x="327.82831"
         y="-8.0282558e-07"
         id="tspan258">iterator_list *Iterator_list(list *list) ;
</tspan><tspan
         x="335.74353"
         y="-8.0282558e-07"
         id="tspan259">iterator_list *Iterator_LIST(list *list, Size_T len);
</tspan><tspan
         x="343.65875"
         y="-8.0282558e-07"
         id="tspan260">bool Iter_List_Set(iterator_list *iter, Size_T len);
</tspan><tspan
         x="351.57398"
         y="-8.0282558e-07"
         id="tspan261">bool Iter_List_Next(iterator_list *iter, Size_T len);
</tspan><tspan
         x="359.4892"
         y="-8.0282558e-07"
         id="tspan262">bool Iter_List_Last(iterator_list *iter, Size_T len);
</tspan><tspan
         x="367.40442"
         y="-8.0282558e-07"
         id="tspan263">Size_T Iter_len_list(iterator_list *iter) ;
</tspan><tspan
         x="375.31964"
         y="-8.0282558e-07"
         id="tspan264">struct list_node *get_Iter_listNode(iterator_list *iter) ;
</tspan><tspan
         x="383.23486"
         y="-8.0282558e-07"
         id="tspan265">/*function definition of list*/
</tspan><tspan
         x="391.15009"
         y="-8.0282558e-07"
         id="tspan266">struct list *List();
</tspan><tspan
         x="399.06531"
         y="-8.0282558e-07"
         id="tspan267">struct list *split(string str, char delimiter);
</tspan><tspan
         x="406.98053"
         y="-8.0282558e-07"
         id="tspan268">struct list_node *get_list_node(struct list *list, int index);
</tspan><tspan
         x="414.89575"
         y="-8.0282558e-07"
         id="tspan269">void append_list(struct list *list, string data);
</tspan><tspan
         x="422.89072"
         y="-8.0282558e-07"
         id="tspan270">void append_list_plus(struct list *list, string data) ;//添加数据,主要针对一些特殊字符处理,例如:&quot;&quot;, &quot;None&quot;, &quot;(null)&quot;就不允许被添加进</tspan><tspan
         x="430.88568"
         y="-8.0282558e-07"
         id="tspan271">list
</tspan><tspan
         x="438.8009"
         y="-8.0282558e-07"
         id="tspan272">void remove_list(struct list *list, int index);
</tspan><tspan
         x="446.71613"
         y="-8.0282558e-07"
         id="tspan273">void print_list(struct list *list);
</tspan><tspan
         x="454.63135"
         y="-8.0282558e-07"
         id="tspan274">string get_data(struct list_node *node) ;
</tspan><tspan
         x="462.54657"
         y="-8.0282558e-07"
         id="tspan275">/*The following code is the dirt definition, 
</tspan><tspan
         x="470.46179"
         y="-8.0282558e-07"
         id="tspan276">the struct and function definition*/
</tspan><tspan
         x="478.37702"
         y="-8.0282558e-07"
         id="tspan277">typedef struct dirt{
</tspan><tspan
         x="486.29224"
         y="-8.0282558e-07"
         id="tspan278">    int len;
</tspan><tspan
         x="494.20746"
         y="-8.0282558e-07"
         id="tspan279">    struct dirt_node *head,*tail;
</tspan><tspan
         x="502.12268"
         y="-8.0282558e-07"
         id="tspan280">}dirt;
</tspan><tspan
         x="510.0379"
         y="-8.0282558e-07"
         id="tspan281">struct dirt_node{
</tspan><tspan
         x="517.95316"
         y="-8.0282558e-07"
         id="tspan282">    string key,value;
</tspan><tspan
         x="525.86838"
         y="-8.0282558e-07"
         id="tspan283">    void *more_data ;
</tspan><tspan
         x="533.7836"
         y="-8.0282558e-07"
         id="tspan284">    struct dirt_node *next;
</tspan><tspan
         x="541.69882"
         y="-8.0282558e-07"
         id="tspan285">    struct dirt_node *last;
</tspan><tspan
         x="549.61405"
         y="-8.0282558e-07"
         id="tspan286">};
</tspan><tspan
         x="557.52927"
         y="-8.0282558e-07"
         id="tspan287">/*function definition of dirt*/
</tspan><tspan
         x="565.44449"
         y="-8.0282558e-07"
         id="tspan288">struct dirt *Dirt();
</tspan><tspan
         x="573.35971"
         y="-8.0282558e-07"
         id="tspan289">void print_dirt(struct dirt *dirt);
</tspan><tspan
         x="581.27493"
         y="-8.0282558e-07"
         id="tspan290">void remove_dirt_key(struct dirt *dirt, string key);
</tspan><tspan
         x="589.19016"
         y="-8.0282558e-07"
         id="tspan291">bool find_dirt_key(struct dirt *dirt, string key);
</tspan><tspan
         x="597.10538"
         y="-8.0282558e-07"
         id="tspan292">string get_key(struct dirt_node *dirt_node);
</tspan><tspan
         x="605.0206"
         y="-8.0282558e-07"
         id="tspan293">string get_value(struct dirt_node *dirt_node);
</tspan><tspan
         x="612.93582"
         y="-8.0282558e-07"
         id="tspan294">struct dirt_node *get_dirt_node(struct dirt *dirt, string key);
</tspan><tspan
         x="620.85105"
         y="-8.0282558e-07"
         id="tspan295">void append_dirt(struct dirt *dirt, string key, string value);
</tspan><tspan
         x="628.84601"
         y="-8.0282558e-07"
         id="tspan296">dirt *get_config_File(string conf); //这个默认保证conf文件语法正确
</tspan><tspan
         x="636.92071"
         y="-8.0282558e-07"
         id="tspan297">/*The following code is the tree definition, 
</tspan><tspan
         x="644.91568"
         y="-8.0282558e-07"
         id="tspan298">the struct and function definition*/
</tspan><tspan
         x="652.8309"
         y="-8.0282558e-07"
         id="tspan299">typedef struct tree{
</tspan><tspan
         x="660.74613"
         y="-8.0282558e-07"
         id="tspan300">    int child_num;
</tspan><tspan
         x="668.66135"
         y="-8.0282558e-07"
         id="tspan301">    struct tree *parent;
</tspan><tspan
         x="676.57657"
         y="-8.0282558e-07"
         id="tspan302">    struct tree **child;
</tspan><tspan
         x="684.49179"
         y="-8.0282558e-07"
         id="tspan303">    void **add_data;
</tspan><tspan
         x="692.40701"
         y="-8.0282558e-07"
         id="tspan304">    int data_num;
</tspan><tspan
         x="700.32224"
         y="-8.0282558e-07"
         id="tspan305">    dirt *more;
</tspan><tspan
         x="708.23746"
         y="-8.0282558e-07"
         id="tspan306">    string data;
</tspan><tspan
         x="716.15268"
         y="-8.0282558e-07"
         id="tspan307">    string key;
</tspan><tspan
         x="724.0679"
         y="-8.0282558e-07"
         id="tspan308">}tree;
</tspan><tspan
         x="731.98313"
         y="-8.0282558e-07"
         id="tspan309">/*function definition of tree*/
</tspan><tspan
         x="739.89835"
         y="-8.0282558e-07"
         id="tspan310">struct tree *Tree(string data, string key, struct tree *parent);
</tspan><tspan
         x="747.81357"
         y="-8.0282558e-07"
         id="tspan311">void append_tree(struct tree *tree, string data, string key);
</tspan><tspan
         x="755.72879"
         y="-8.0282558e-07"
         id="tspan312">void print_tree(struct tree *tree, int level);
</tspan><tspan
         x="763.64401"
         y="-8.0282558e-07"
         id="tspan313">void add_tree_data(struct tree *tree, void *data);
</tspan><tspan
         x="771.55924"
         y="-8.0282558e-07"
         id="tspan314">void append_more_data(struct tree *tree, string key, string data);
</tspan><tspan
         x="779.47446"
         y="-8.0282558e-07"
         id="tspan315">string get_tree_XML(struct tree *tree,int level); //Format: xml
</tspan><tspan
         x="787.38968"
         y="-8.0282558e-07"
         id="tspan316">tree *get_child(tree *tree, int index);
</tspan><tspan
         x="795.3049"
         y="-8.0282558e-07"
         id="tspan317">tree *get_tree_from_XML(string xml);
</tspan><tspan
         x="803.22012"
         y="-8.0282558e-07"
         id="tspan318">/*The following code is the resources definition, 
</tspan><tspan
         x="811.13535"
         y="-8.0282558e-07"
         id="tspan319">the struct and function definition*/
</tspan><tspan
         x="819.05057"
         y="-8.0282558e-07"
         id="tspan320">typedef struct resources{
</tspan><tspan
         x="826.96579"
         y="-8.0282558e-07"
         id="tspan321">    int len;
</tspan><tspan
         x="834.88101"
         y="-8.0282558e-07"
         id="tspan322">    void **data;
</tspan><tspan
         x="842.79624"
         y="-8.0282558e-07"
         id="tspan323">}resources;
</tspan><tspan
         x="850.71146"
         y="-8.0282558e-07"
         id="tspan324">resources *Resources();
</tspan><tspan
         x="858.62668"
         y="-8.0282558e-07"
         id="tspan325">void append_resources(resources *resources, void *data);
</tspan><tspan
         x="866.5419"
         y="-8.0282558e-07"
         id="tspan326">void remove_resources(resources *resources, int index);
</tspan><tspan
         x="874.45712"
         y="-8.0282558e-07"
         id="tspan327">void *get_resources(resources *resources, int index);typedef struct stack{
</tspan><tspan
         x="882.37235"
         y="-8.0282558e-07"
         id="tspan328">    int len;
</tspan><tspan
         x="890.28757"
         y="-8.0282558e-07"
         id="tspan329">    struct stack_node *top,*end;
</tspan><tspan
         x="898.20279"
         y="-8.0282558e-07"
         id="tspan330">}stack;
</tspan><tspan
         x="906.11801"
         y="-8.0282558e-07"
         id="tspan331">struct stack_node{
</tspan><tspan
         x="914.03324"
         y="-8.0282558e-07"
         id="tspan332">    string data;
</tspan><tspan
         x="921.94846"
         y="-8.0282558e-07"
         id="tspan333">    void *more_data;
</tspan><tspan
         x="929.86368"
         y="-8.0282558e-07"
         id="tspan334">    int add_len ;
</tspan><tspan
         x="937.7789"
         y="-8.0282558e-07"
         id="tspan335">    struct stack_node *next;
</tspan><tspan
         x="945.69412"
         y="-8.0282558e-07"
         id="tspan336">    struct stack_node *last;
</tspan><tspan
         x="953.60935"
         y="-8.0282558e-07"
         id="tspan337">};
</tspan><tspan
         x="961.52457"
         y="-8.0282558e-07"
         id="tspan338">/*function definition of stack*/
</tspan><tspan
         x="969.43979"
         y="-8.0282558e-07"
         id="tspan339">struct stack *Stack();
</tspan><tspan
         x="977.35501"
         y="-8.0282558e-07"
         id="tspan340">void push_stack(struct stack *stack, string data);
</tspan><tspan
         x="985.34997"
         y="-8.0282558e-07"
         id="tspan341">void add_stack_data(struct stack *stack, void *data); //默认给栈顶添加数据
</tspan><tspan
         x="993.34494"
         y="-8.0282558e-07"
         id="tspan342">void pop_stack(struct stack *stack);
</tspan><tspan
         x="1001.2602"
         y="-8.0282558e-07"
         id="tspan343">void print_stack(struct stack *stack);
</tspan><tspan
         x="1009.2551"
         y="-8.0282558e-07"
         id="tspan344">struct stack_node *get_stack_top(struct stack *stack);//获得栈顶
</tspan><tspan
         x="1017.3298"
         y="-8.0282558e-07"
         id="tspan345">/*The following code is the list definition, 
</tspan><tspan
         x="1025.3248"
         y="-8.0282558e-07"
         id="tspan346">the struct and function definition*/
</tspan><tspan
         x="1033.2401"
         y="-8.0282558e-07"
         id="tspan347">typedef struct list{
</tspan><tspan
         x="1041.1554"
         y="-8.0282558e-07"
         id="tspan348">    int len;
</tspan><tspan
         x="1049.0706"
         y="-8.0282558e-07"
         id="tspan349">    struct list_node *head,*tail;
</tspan><tspan
         x="1056.9859"
         y="-8.0282558e-07"
         id="tspan350">}list;
</tspan><tspan
         x="1064.9012"
         y="-8.0282558e-07"
         id="tspan351">struct list_node{
</tspan><tspan
         x="1072.8165"
         y="-8.0282558e-07"
         id="tspan352">    string data;
</tspan><tspan
         x="1080.7318"
         y="-8.0282558e-07"
         id="tspan353">    struct list_node *next;
</tspan><tspan
         x="1088.6471"
         y="-8.0282558e-07"
         id="tspan354">    struct list_node *last;
</tspan><tspan
         x="1096.5623"
         y="-8.0282558e-07"
         id="tspan355">};
</tspan><tspan
         x="1104.4776"
         y="-8.0282558e-07"
         id="tspan356">typedef struct iterator_list{
</tspan><tspan
         x="1112.3929"
         y="-8.0282558e-07"
         id="tspan357">    list *list;
</tspan><tspan
         x="1120.3082"
         y="-8.0282558e-07"
         id="tspan358">    Size_T iter_len ;
</tspan><tspan
         x="1128.2235"
         y="-8.0282558e-07"
         id="tspan359">    struct list_node *node ;
</tspan><tspan
         x="1136.1388"
         y="-8.0282558e-07"
         id="tspan360">}iterator_list;
</tspan><tspan
         x="1144.1338"
         y="-8.0282558e-07"
         id="tspan361">//迭代器的函数
</tspan><tspan
         x="1152.1288"
         y="-8.0282558e-07"
         id="tspan362">iterator_list *Iterator_list(list *list) ;
</tspan><tspan
         x="1160.044"
         y="-8.0282558e-07"
         id="tspan363">iterator_list *Iterator_LIST(list *list, Size_T len);
</tspan><tspan
         x="1167.9593"
         y="-8.0282558e-07"
         id="tspan364">bool Iter_List_Set(iterator_list *iter, Size_T len);
</tspan><tspan
         x="1175.8746"
         y="-8.0282558e-07"
         id="tspan365">bool Iter_List_Next(iterator_list *iter, Size_T len);
</tspan><tspan
         x="1183.7899"
         y="-8.0282558e-07"
         id="tspan366">bool Iter_List_Last(iterator_list *iter, Size_T len);
</tspan><tspan
         x="1191.7052"
         y="-8.0282558e-07"
         id="tspan367">Size_T Iter_len_list(iterator_list *iter) ;
</tspan><tspan
         x="1199.6205"
         y="-8.0282558e-07"
         id="tspan368">struct list_node *get_Iter_listNode(iterator_list *iter) ;
</tspan><tspan
         x="1207.5357"
         y="-8.0282558e-07"
         id="tspan369">/*function definition of list*/
</tspan><tspan
         x="1215.451"
         y="-8.0282558e-07"
         id="tspan370">struct list *List();
</tspan><tspan
         x="1223.3663"
         y="-8.0282558e-07"
         id="tspan371">struct list *split(string str, char delimiter);
</tspan><tspan
         x="1231.2816"
         y="-8.0282558e-07"
         id="tspan372">struct list_node *get_list_node(struct list *list, int index);
</tspan><tspan
         x="1239.1969"
         y="-8.0282558e-07"
         id="tspan373">void append_list(struct list *list, string data);
</tspan><tspan
         x="1247.1919"
         y="-8.0282558e-07"
         id="tspan374">void append_list_plus(struct list *list, string data) ;//添加数据,主要针对一些特殊字符处理,例如:&quot;&quot;, &quot;None&quot;, &quot;(null)&quot;就不允许被添加进</tspan><tspan
         x="1255.1869"
         y="-8.0282558e-07"
         id="tspan375">list
</tspan><tspan
         x="1263.1021"
         y="-8.0282558e-07"
         id="tspan376">void remove_list(struct list *list, int index);
</tspan><tspan
         x="1271.0174"
         y="-8.0282558e-07"
         id="tspan377">void print_list(struct list *list);
</tspan><tspan
         x="1278.9327"
         y="-8.0282558e-07"
         id="tspan378">string get_data(struct list_node *node) ;
</tspan><tspan
         x="1286.848"
         y="-8.0282558e-07"
         id="tspan379">/*The following code is the dirt definition, 
</tspan><tspan
         x="1294.7633"
         y="-8.0282558e-07"
         id="tspan380">the struct and function definition*/
</tspan><tspan
         x="1302.6786"
         y="-8.0282558e-07"
         id="tspan381">typedef struct dirt{
</tspan><tspan
         x="1310.5938"
         y="-8.0282558e-07"
         id="tspan382">    int len;
</tspan><tspan
         x="1318.5091"
         y="-8.0282558e-07"
         id="tspan383">    struct dirt_node *head,*tail;
</tspan><tspan
         x="1326.4244"
         y="-8.0282558e-07"
         id="tspan384">}dirt;
</tspan><tspan
         x="1334.3397"
         y="-8.0282558e-07"
         id="tspan385">struct dirt_node{
</tspan><tspan
         x="1342.255"
         y="-8.0282558e-07"
         id="tspan386">    string key,value;
</tspan><tspan
         x="1350.1703"
         y="-8.0282558e-07"
         id="tspan387">    void *more_data ;
</tspan><tspan
         x="1358.0855"
         y="-8.0282558e-07"
         id="tspan388">    struct dirt_node *next;
</tspan><tspan
         x="1366.0008"
         y="-8.0282558e-07"
         id="tspan389">    struct dirt_node *last;
</tspan><tspan
         x="1373.9161"
         y="-8.0282558e-07"
         id="tspan390">};
</tspan><tspan
         x="1381.8314"
         y="-8.0282558e-07"
         id="tspan391">/*function definition of dirt*/
</tspan><tspan
         x="1389.7467"
         y="-8.0282558e-07"
         id="tspan392">struct dirt *Dirt();
</tspan><tspan
         x="1397.662"
         y="-8.0282558e-07"
         id="tspan393">void print_dirt(struct dirt *dirt);
</tspan><tspan
         x="1405.5772"
         y="-8.0282558e-07"
         id="tspan394">void remove_dirt_key(struct dirt *dirt, string key);
</tspan><tspan
         x="1413.4925"
         y="-8.0282558e-07"
         id="tspan395">bool find_dirt_key(struct dirt *dirt, string key);
</tspan><tspan
         x="1421.4078"
         y="-8.0282558e-07"
         id="tspan396">string get_key(struct dirt_node *dirt_node);
</tspan><tspan
         x="1429.3231"
         y="-8.0282558e-07"
         id="tspan397">string get_value(struct dirt_node *dirt_node);
</tspan><tspan
         x="1437.2384"
         y="-8.0282558e-07"
         id="tspan398">struct dirt_node *get_dirt_node(struct dirt *dirt, string key);
</tspan><tspan
         x="1445.1537"
         y="-8.0282558e-07"
         id="tspan399">void append_dirt(struct dirt *dirt, string key, string value);
</tspan><tspan
         x="1453.1487"
         y="-8.0282558e-07"
         id="tspan400">dirt *get_config_File(string conf); //这个默认保证conf文件语法正确
</tspan><tspan
         x="1461.2234"
         y="-8.0282558e-07"
         id="tspan401">/*The following code is the tree definition, 
</tspan><tspan
         x="1469.2184"
         y="-8.0282558e-07"
         id="tspan402">the struct and function definition*/
</tspan><tspan
         x="1477.1336"
         y="-8.0282558e-07"
         id="tspan403">typedef struct tree{
</tspan><tspan
         x="1485.0489"
         y="-8.0282558e-07"
         id="tspan404">    int child_num;
</tspan><tspan
         x="1492.9642"
         y="-8.0282558e-07"
         id="tspan405">    struct tree *parent;
</tspan><tspan
         x="1500.8795"
         y="-8.0282558e-07"
         id="tspan406">    struct tree **child;
</tspan><tspan
         x="1508.7948"
         y="-8.0282558e-07"
         id="tspan407">    void **add_data;
</tspan><tspan
         x="1516.7101"
         y="-8.0282558e-07"
         id="tspan408">    int data_num;
</tspan><tspan
         x="1524.6253"
         y="-8.0282558e-07"
         id="tspan409">    dirt *more;
</tspan><tspan
         x="1532.5406"
         y="-8.0282558e-07"
         id="tspan410">    string data;
</tspan><tspan
         x="1540.4559"
         y="-8.0282558e-07"
         id="tspan411">    string key;
</tspan><tspan
         x="1548.3712"
         y="-8.0282558e-07"
         id="tspan412">}tree;
</tspan><tspan
         x="1556.2865"
         y="-8.0282558e-07"
         id="tspan413">/*function definition of tree*/
</tspan><tspan
         x="1564.2018"
         y="-8.0282558e-07"
         id="tspan414">struct tree *Tree(string data, string key, struct tree *parent);
</tspan><tspan
         x="1572.117"
         y="-8.0282558e-07"
         id="tspan415">void append_tree(struct tree *tree, string data, string key);
</tspan><tspan
         x="1580.0323"
         y="-8.0282558e-07"
         id="tspan416">void print_tree(struct tree *tree, int level);
</tspan><tspan
         x="1587.9476"
         y="-8.0282558e-07"
         id="tspan417">void add_tree_data(struct tree *tree, void *data);
</tspan><tspan
         x="1595.8629"
         y="-8.0282558e-07"
         id="tspan418">void append_more_data(struct tree *tree, string key, string data);
</tspan><tspan
         x="1603.7782"
         y="-8.0282558e-07"
         id="tspan419">string get_tree_XML(struct tree *tree,int level); //Format: xml
</tspan><tspan
         x="1611.6935"
         y="-8.0282558e-07"
         id="tspan420">tree *get_child(tree *tree, int index);
</tspan><tspan
         x="1619.6087"
         y="-8.0282558e-07"
         id="tspan421">tree *get_tree_from_XML(string xml);
</tspan><tspan
         x="1627.524"
         y="-8.0282558e-07"
         id="tspan422">/*The following code is the resources definition, 
</tspan><tspan
         x="1635.4393"
         y="-8.0282558e-07"
         id="tspan423">the struct and function definition*/
</tspan><tspan
         x="1643.3546"
         y="-8.0282558e-07"
         id="tspan424">typedef struct resources{
</tspan><tspan
         x="1651.2699"
         y="-8.0282558e-07"
         id="tspan425">    int len;
</tspan><tspan
         x="1659.1852"
         y="-8.0282558e-07"
         id="tspan426">    void **data;
</tspan><tspan
         x="1667.1004"
         y="-8.0282558e-07"
         id="tspan427">}resources;
</tspan><tspan
         x="1675.0157"
         y="-8.0282558e-07"
         id="tspan428">resources *Resources();
</tspan><tspan
         x="1682.931"
         y="-8.0282558e-07"
         id="tspan429">void append_resources(resources *resources, void *data);
</tspan><tspan
         x="1690.8463"
         y="-8.0282558e-07"
         id="tspan430">void remove_resources(resources *resources, int index);
</tspan><tspan
         x="1698.7616"
         y="-8.0282558e-07"
         id="tspan431">void *get_resources(resources *resources, int index);
</tspan><tspan
         x="1706.6769"
         y="-8.0282558e-07"
         id="tspan432">int main(){
</tspan><tspan
         x="1714.5921"
         y="-8.0282558e-07"
         id="tspan433">    printf(&quot;load&quot;);
</tspan><tspan
         x="1722.5074"
         y="-8.0282558e-07"
         id="tspan434">}</tspan></text></g></svg>
